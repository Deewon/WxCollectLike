package com.xd.wxlike.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xd.wxlike.common.entity.MessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_ENTITY".
*/
public class MessageEntityDao extends AbstractDao<MessageEntity, Long> {

    public static final String TABLENAME = "MESSAGE_ENTITY";

    /**
     * Properties of entity MessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property MsgType = new Property(1, int.class, "msgType", false, "MSG_TYPE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property URL = new Property(3, String.class, "URL", false, "URL");
        public final static Property URLContent = new Property(4, String.class, "URLContent", false, "URLCONTENT");
        public final static Property MsgTime = new Property(5, long.class, "msgTime", false, "MSG_TIME");
        public final static Property PicAddress = new Property(6, String.class, "picAddress", false, "PIC_ADDRESS");
    }


    public MessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 1: msgType
                "\"CONTENT\" TEXT," + // 2: content
                "\"URL\" TEXT," + // 3: URL
                "\"URLCONTENT\" TEXT," + // 4: URLContent
                "\"MSG_TIME\" INTEGER NOT NULL ," + // 5: msgTime
                "\"PIC_ADDRESS\" TEXT);"); // 6: picAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMsgType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(4, URL);
        }
 
        String URLContent = entity.getURLContent();
        if (URLContent != null) {
            stmt.bindString(5, URLContent);
        }
        stmt.bindLong(6, entity.getMsgTime());
 
        String picAddress = entity.getPicAddress();
        if (picAddress != null) {
            stmt.bindString(7, picAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getMsgType());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String URL = entity.getURL();
        if (URL != null) {
            stmt.bindString(4, URL);
        }
 
        String URLContent = entity.getURLContent();
        if (URLContent != null) {
            stmt.bindString(5, URLContent);
        }
        stmt.bindLong(6, entity.getMsgTime());
 
        String picAddress = entity.getPicAddress();
        if (picAddress != null) {
            stmt.bindString(7, picAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MessageEntity readEntity(Cursor cursor, int offset) {
        MessageEntity entity = new MessageEntity( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // msgType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // URL
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // URLContent
            cursor.getLong(offset + 5), // msgTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // picAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMsgType(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setURL(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setURLContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgTime(cursor.getLong(offset + 5));
        entity.setPicAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
